#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        letterh {
            bindings = <&kp LBKT>;
            key-positions = <32 33>;
            layers = <0>;
        };
        lettersign {
            bindings = <&kp RBKT>;
            key-positions = <31 32>;
            layers = <0>;
        };
    };


    behaviors {
        td_super: td_super {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LGUI>, <&mo 5>, <&mo 4>;
        };

        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC  &kp Q         &kp W         &kp E                   &kp R               &kp T           &kp Y  &kp U               &kp I          &kp O              &kp P                 &kp BSPC
&kp TAB  &u_mt LGUI A  &u_mt LALT S  &u_mt LCTRL D           &u_mt LSHIFT F      &kp G           &kp H  &u_mt RSHIFT J      &u_mt RCTRL K  &u_mt RALT L       &u_mt RGUI SEMI       &kp APOS
&mo 4    &kp Z         &kp X         &kp C                   &kp V               &kp B           &kp N  &kp M               &kp COMMA      &kp DOT            &kp  FSLH             &mo 4
                                     &td_super               &kp SPACE           &mo 1           &mo 2  &kp RET
            >;
        };

        NAV {
            bindings = <
&trans                     &kp HOME                        &mkp RCLK              &kp UP                 &mkp LCLK              &kp END                                                                     &kp KP_MINUS       &kp N7          &kp N8       &kp N9  &kp KP_DIVIDE      &kp BSPC
&kp LC(TAB)                &trans                          &kp LEFT               &kp DOWN               &kp RIGHT              &kp CAPS                                                                    &kp KP_PLUS        &kp N4          &kp N5       &kp N6  &kp KP_MULTIPLY    &kp LA(C)
&kp LA(LG(LS(LC(TILDE))))  &kp LA(LG(LS(LC(LEFT_BRACE))))  &kp LA(LG(LS(LC(RIGHT_BRACKET))))  &kp LA(LG(LS(LC(LEFT_BRACKET))))  &kp LA(LG(LS(LC(RIGHT_BRACE))))  &kp LA(LG(LS(LC(GRAVE))))     &kp N0             &kp N1          &kp N2       &kp N3  &kp KP_EQUAL       &kp LA(V)
                                    &trans     &trans     &trans                        &mo 3              &trans
            >;
        };

        SYMNUM {
            bindings = <
&kp LA(T)   &kp LA(Z)     &kp LA(Q)    &kp LA(D)         &kp LA(W)   &kp LA(X)          &kp LA(Y)  &kp LA(I)    &kp BSLH    &kp LA(O)          &none            &kp DEL
&kp PERCENT &kp LA(N1)    &kp LPAR     &kp KP_EQUAL      &kp RPAR    &kp LA(N5)         &kp LA(H)  &kp LA(N6)   &kp LA(J)   &kp LA(K)          &kp EXCLAMATION  &none
&kp LA(N3)  &kp LA(N2)    &kp LA(A)    &kp UNDERSCORE    &kp LA(S)   &kp LA(N4)         &kp LA(F)  &kp LA(M)    &kp LA(C)   &kp LA(V)          &kp LA(N)        &none
                                       &trans            &trans      &mo 3              &trans     &trans
            >;
        };

        FUN {
            bindings = <
&trans       &trans       &trans  &trans  &trans   &kp C_POWER                          &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans       &trans       &trans  &trans  &trans   &trans                               &out OUT_TOG  &trans            &trans             &trans           &trans        &trans
&bootloader  &trans       &trans  &trans  &trans   &trans                               &trans        &trans            &trans             &trans           &trans        &bootloader
                                  &trans  &trans   &trans                               &trans        &trans
            >;
        };

        SCROLL {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                                          &kp F7  &kp F8    &kp F9     &kp F10 &kp F11           &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                                          &trans  &trans    &trans     &trans  &kp K_PLAY_PAUSE  &kp C_VOLUME_UP
&trans  &trans  &trans  &trans  &trans  &trans                                          &trans  &mkp LCLK &mkp RCLK  &trans  &kp C_MUTE        &kp C_VOLUME_DOWN
                        &trans  &trans  &trans                                          &trans  &trans
            >;
        };

        SUPER {
            bindings = <
        &kp LA(LG(LS(LC(EXCLAMATION)))) &kp LA(LG(LS(LC(Q))))  &kp LA(LG(LS(LC(W))))  &kp LA(LG(LS(LC(E))))  &kp LA(LG(LS(LC(R))))  &kp LA(LG(LS(LC(T))))  &kp LA(LG(LS(LC(Y))))  &kp LA(LG(LS(LC(U))))  &kp LA(LG(LS(LC(I))))      &kp LA(LG(LS(LC(O))))    &kp LA(LG(LS(LC(P))))          &kp LA(LG(LS(LC(QUESTION))))
        &kp LA(LG(LS(LC(PERCENT))))     &kp LA(LG(LS(LC(A))))  &kp LA(LG(LS(LC(S))))  &kp LA(LG(LS(LC(D))))  &kp LA(LG(LS(LC(F))))  &kp LA(LG(LS(LC(G))))  &kp LA(LG(LS(LC(H))))  &kp LA(LG(LS(LC(J))))  &kp LA(LG(LS(LC(K))))      &kp LA(LG(LS(LC(L))))    &kp LA(LG(LS(LC(SEMICOLON))))  &kp LA(LG(LS(LC(PLUS))))
        &kp LA(LG(LS(LC(UNDERSCORE))))  &kp LA(LG(LS(LC(Z))))  &kp LA(LG(LS(LC(X))))  &kp LA(LG(LS(LC(C))))  &kp LA(LG(LS(LC(V))))  &kp LA(LG(LS(LC(B))))  &kp LA(LG(LS(LC(N))))  &kp LA(LG(LS(LC(M))))  &kp LA(LG(LS(LC(COMMA))))  &kp LA(LG(LS(LC(DOT))))  &kp LA(LG(LS(LC(SLASH))))      &kp LA(LG(LS(LC(MINUS))))
                                                                                                                                   &trans  &trans  &trans  &trans  &trans
                    >;
                };
    };
};
